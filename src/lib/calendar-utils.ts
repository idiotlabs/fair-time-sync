import { format } from 'date-fns';
import { formatInTimeZone } from 'date-fns-tz';

export interface CalendarEvent {
  id: string;
  teamId: string;
  title?: string;
  description?: string;
  startTime: Date;
  endTime: Date;
  attendees?: Array<{
    name: string;
    email?: string;
  }>;
  location?: string;
}

/**
 * Generate RFC 5545 compliant ICS file content
 */
export function generateICS(event: CalendarEvent): string {
  const formatICSDate = (date: Date): string => {
    return format(date, "yyyyMMdd'T'HHmmss'Z'");
  };

  const escapeICSText = (text: string): string => {
    return text
      .replace(/\\/g, '\\\\')
      .replace(/,/g, '\\,')
      .replace(/;/g, '\\;')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '');
  };

  const now = new Date();
  const uid = `${event.teamId}-${event.id}-${now.getTime()}@fairmeet.app`;
  
  const attendeesText = event.attendees
    ?.map(attendee => {
      const email = attendee.email ? ` (${maskEmail(attendee.email)})` : '';
      return `${attendee.name}${email}`;
    })
    .join(', ') || '';

  const description = [
    event.description || 'Team meeting scheduled through FairMeet',
    attendeesText ? `\\n\\nAttendees: ${attendeesText}` : '',
    '\\n\\nGenerated by FairMeet - Fair Meeting Scheduler'
  ].filter(Boolean).join('');

  const icsContent = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//FairMeet//Fair Meeting Scheduler//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    'BEGIN:VEVENT',
    `UID:${uid}`,
    `DTSTAMP:${formatICSDate(now)}`,
    `DTSTART:${formatICSDate(event.startTime)}`,
    `DTEND:${formatICSDate(event.endTime)}`,
    `SUMMARY:${escapeICSText(event.title || 'FairMeet — Team Meeting')}`,
    `DESCRIPTION:${escapeICSText(description)}`,
    event.location ? `LOCATION:${escapeICSText(event.location)}` : null,
    'STATUS:TENTATIVE',
    'TRANSP:OPAQUE',
    'END:VEVENT',
    'END:VCALENDAR'
  ].filter(line => line !== null).join('\r\n');

  return icsContent;
}

/**
 * Download ICS file
 */
export function downloadICS(event: CalendarEvent, filename?: string): void {
  const icsContent = generateICS(event);
  const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = filename || `fairmeet-${format(event.startTime, 'yyyy-MM-dd-HH-mm')}.ics`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Generate Google Calendar deep link
 */
export function generateGoogleCalendarLink(event: CalendarEvent): string {
  const formatGoogleDate = (date: Date): string => {
    return format(date, "yyyyMMdd'T'HHmmss'Z'");
  };

  const attendeesText = event.attendees
    ?.map(attendee => {
      const email = attendee.email ? ` (${maskEmail(attendee.email)})` : '';
      return `${attendee.name}${email}`;
    })
    .join(', ') || '';

  const description = [
    event.description || 'Team meeting scheduled through FairMeet',
    attendeesText ? `\n\nAttendees: ${attendeesText}` : '',
    '\n\nGenerated by FairMeet - Fair Meeting Scheduler'
  ].filter(Boolean).join('');

  const params = new URLSearchParams({
    action: 'TEMPLATE',
    text: event.title || 'FairMeet — Team Meeting',
    dates: `${formatGoogleDate(event.startTime)}/${formatGoogleDate(event.endTime)}`,
    details: description,
    ...(event.location && { location: event.location })
  });

  return `https://calendar.google.com/calendar/render?${params.toString()}`;
}

/**
 * Open Google Calendar with event
 */
export function openGoogleCalendar(event: CalendarEvent): void {
  const url = generateGoogleCalendarLink(event);
  window.open(url, '_blank', 'noopener,noreferrer');
}

/**
 * Mask email for privacy
 */
export function maskEmail(email: string): string {
  const [local, domain] = email.split('@');
  if (!local || !domain) return email;
  
  const maskedLocal = local.length > 2 
    ? local.charAt(0) + '*'.repeat(Math.min(local.length - 1, 3))
    : local.charAt(0) + '*';
  
  return `${maskedLocal}@${domain}`;
}

/**
 * Test cases for different timezone scenarios
 */
export interface TestCase {
  name: string;
  startTime: Date;
  endTime: Date;
  timezone: string;
  description: string;
}

export function generateTestCases(): TestCase[] {
  const now = new Date();
  const baseDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);

  return [
    {
      name: 'KST Standard Time',
      startTime: new Date(baseDate.getTime() + (14 * 60 * 60 * 1000)), // 2PM UTC = 11PM KST
      endTime: new Date(baseDate.getTime() + (15 * 60 * 60 * 1000)),   // 3PM UTC = 12AM KST+1
      timezone: 'Asia/Seoul',
      description: 'Evening meeting in Korea timezone'
    },
    {
      name: 'PST/PDT Transition',
      startTime: new Date(2024, 2, 15, 10, 0, 0), // March 15, 2024 10:00 UTC
      endTime: new Date(2024, 2, 15, 11, 0, 0),   // March 15, 2024 11:00 UTC
      timezone: 'America/Los_Angeles',
      description: 'Meeting during PST/PDT transition period'
    },
    {
      name: 'UTC Meeting',
      startTime: new Date(baseDate.getTime() + (12 * 60 * 60 * 1000)), // 12PM UTC
      endTime: new Date(baseDate.getTime() + (13 * 60 * 60 * 1000)),   // 1PM UTC
      timezone: 'UTC',
      description: 'Standard UTC meeting time'
    },
    {
      name: 'Cross-Date Boundary',
      startTime: new Date(baseDate.getTime() + (23 * 60 * 60 * 1000)), // 11PM UTC
      endTime: new Date(baseDate.getTime() + (24 * 60 * 60 * 1000) + (30 * 60 * 1000)), // 12:30AM UTC+1
      timezone: 'Europe/London',
      description: 'Meeting crossing date boundary'
    }
  ];
}

/**
 * Format time in specific timezone for display
 */
export function formatTimeInTimezone(date: Date, timezone: string): string {
  try {
    return formatInTimeZone(date, timezone, 'yyyy-MM-dd HH:mm:ss zzz');
  } catch (error) {
    console.warn(`Failed to format time in timezone ${timezone}:`, error);
    return format(date, 'yyyy-MM-dd HH:mm:ss') + ' UTC';
  }
}